# ------------------------------------------------------------
# Copyright (c) 2017-present, SeetaTech, Co.,Ltd.
#
# Licensed under the BSD 2-Clause License.
# You should have received a copy of the BSD 2-Clause License
# along with the software. If not, See,
#
#      <https://opensource.org/licenses/BSD-2-Clause>
#
# ------------------------------------------------------------

"""Define the global options and useful device helpers."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import dragon.import_c_api as C
import dragon.core.logging as logging

option = {}

# The current device, 'CPU', 'CUDA' or 'CNML'
option['device'] = 'CPU'

# The device id
option['device_id'] = 0

# Whether to use cuDNN if possible
option['use_cudnn'] = False

# The global random seed
option['random_seed'] = 3

# Disable the memonger if true
option['debug_mode'] = False

# Whether to share grads
option['share_grads'] = True

# Optional graph type
option['graph_type'] = ''

# Whether to log the meta graphs
option['log_meta_graph'] = False

# The prefix of exporting directory
# An empty string leads to invalid exporting
option['export_meta_graph'] = ''

# Whether to log the optimized graphs
option['log_optimized_graph'] = False


def GetGlobalOptions():
    """Return all the global options.

    Returns
    -------
    dict
        The global option dict.

    """
    return option


def EnableCPU():
    """Enable CPU mode globally.

    Returns
    -------
    None

    """
    global option
    option['device'] = 'CPU'


def IsCUDADriverSufficient():
    """Is CUDADriver sufficient?

    Returns
    -------
    boolean
        ``True`` if your device(s) support CUDA otherwise ``False``.

    References
    ----------
    The wrapper of ``IsCUDADriverSufficientCC``.

    """
    return C.IsCUDADriverSufficientCC()


def EnableCUDA(gpu_id=0, use_cudnn=True):
    """Enable NVIDIA's CUDA mode globally.

    Parameters
    ----------
    gpu_id : int
        The id of GPU to use.
    use_cudnn : boolean
        Whether to use cuDNN if available.

    Returns
    -------
    None

    """
    global option
    option['device'] = 'CUDA'
    option['device_id'] = gpu_id
    option['use_cudnn'] = use_cudnn


def EnableCNML(mlu_id=0):
    """Enable Cambricon's CNML mode globally.

    Parameters
    ----------
    device_id : int
        The id of MLU to use.

    Returns
    -------
    None

    """
    global option
    option['device'] = 'CNML'
    option['device_id'] = mlu_id


def SetRandomSeed(seed):
    """Set the global random seed.

    Parameters
    ----------
    seed : int
        The seed to use.

    Returns
    -------
    None

    """
    global option
    option['random_seed'] = seed


def GetRandomSeed():
    """Get the global random seed.

    Returns
    -------
    int
        The global random seed.

    """
    return option['random_seed']


def SetGPU(id):
    """Set the global id GPU.

    Parameters
    ----------
    id : int
        The id of GPU to use.

    Returns
    -------
    None

    """
    global option
    option['device_id'] = id


def GetGPU():
    """Get the global id of GPU.

    Returns
    -------
    int
        The global id of GPU.

    """
    return option['device_id']


def SetDebugMode(enabled=True):
    """Enable Debug mode globally.

    It will disable all memory sharing optimizations.

    Parameters
    ----------
    enabled : boolean
        Whether to enable debug mode.

    Returns
    -------
    None

    """
    global option
    option['debug_mode'] = enabled


def SetGraphType(graph_type=''):
    """Set the graph type.

    If empty, the default DAG graph will be used.

    Parameters
    ----------
    graph_type : str
        The graph type.

    Returns
    -------
    None

    """
    global option
    option['graph_type'] = graph_type


def LogMetaGraph(enabled=True):
    """Enable to log meta graph globally.

    The meta graph is a describer generated by the VM frontend.

    Parameters
    ----------
    enabled : boolean
        Whether to enable logging.

    Returns
    -------
    None

    """
    global option
    option['log_meta_graph'] = enabled


def LogOptimizedGraph(enabled=True):
    """Enable to log optimized graph globally.

    The optimized graph is a describer optimized by the VM backend.

    Parameters
    ----------
    enabled : boolean
        Whether to enable logging.

    Returns
    -------
    None

    """
    global option
    option['log_optimized_graph'] = enabled


def ExportMetaGraph(prefix=''):
    """Enable to export all runnable meta graphs into text files.

    These text files will be saved as the following format:

    ``prefix/Graph_xxx.metatxt``

    Note that an empty prefix will leads to invalid exporting.

    Parameters
    ----------
    prefix : str
        The prefix of the exporting.

    Returns
    -------
    None

    """
    global option
    option['export_meta_graph'] = prefix


def SetLoggingLevel(level):
    """Set the minimum level of Logging.

    Parameters
    ----------
    level : str
        The level, ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` or ``FATAL``.

    Notes
    -----
    The default level is ``INFO``.

    """
    C.SetLogLevelCC(level)
    logging.set_verbosity({
        'DEBUG': logging.DEBUG,
        'INFO': logging.INFO,
        'WARNING': logging.WARN,
        'ERROR': logging.ERROR,
        'FATAL': logging.FATAL,
        }[level]
    )